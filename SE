git --version
Displays the installed version of Git on your system.
Example: git --version might output git version 2.41.0.

git config --global user.name "<Your username>"
Sets the username for Git commits globally across all repositories.
Example: git config --global user.name "John Doe".

git config --global user.email "<Your email>" 
Configures the email address associated with commits globally.
Example: git config --global user.email "johndoe@example.com".


Working Directory and Staging
git init
Initializes a new Git repository in the current directory. Creates a .git folder.
Example: Run this in a project directory to start versioning it.

git status
Displays the status of the working directory and staging area. Shows changes, untracked files, and the branch status.

git add .
Stages all changes (new, modified, deleted files) for the next commit.
Use git add <filename> for specific files.

git commit -m "<Your Message>"
Creates a snapshot of the staged changes, saving them to the repository.
Example: git commit -m "Initial commit".

git diff
Shows the differences between the working directory and the staging area. Highlights modifications line by line.

git help <command>
Displays detailed help for the specified Git command.
Example: git help commit.

git reset
Moves changes from the staging area back to the working directory or undoes commits.
Example: git reset HEAD <file> unstages a file.

git restore
Discards changes in the working directory or restores files.
Example: git restore <file> reverts a file to the last committed state.


Branch Management
git branch <branch_name>
Creates a new branch.
Example: git branch feature-xyz.

git branch -a
Lists all branches, including remote ones.

git branch -d <branch_name>
Deletes a local branch.
Example: git branch -d feature-xyz.

git checkout <branch_name>
Switches to the specified branch.
Example: git checkout main.

git checkout -b <new_branch>
Creates and switches to a new branch.
Example: git checkout -b feature-abc.

git merge <branch_name>
Merges the specified branch into the current branch.
Example: git merge feature-xyz.


Commit History and Reversion

git log
Displays the commit history in detail.
Includes commit hash, author, date, and message.

git log --oneline
Displays a compact, one-line summary of the commit history.

git revert <commit_hash>
Creates a new commit that undoes changes from the specified commit.
Example: git revert abc123.

Remote Repository

git branch -M main
Renames the default branch to main.

git remote add origin "<your github repo link>"
Links a local repository to a remote repository.
Example: git remote add origin https://github.com/user/repo.git.

git push -u origin main
Pushes the current branch (main) to the remote repository and sets it as the upstream branch.

git pull origin main
Fetches and merges changes from the main branch of the remote repository into the current branch.

Cloning a Repository
git clone "<your github repo link>"
Creates a local copy of a remote repository.
Example: git clone https://github.com/user/repo.git.






5 
//maven java project
File>New>Other>Maven Project>Next

org.apache.maven quickstart 1.4
group id com.app.demo
artifact id sample_maven_java_project

right click on project> Run As>
-Maven clean install test
-build 
goals: clean install test
-java application

to push this project into github
create a new repository in github "sampleExampleJava1"
add .gitignore maven
go to code and copy git repo URL
in gitbash, type:
git clone <URL>: you will get cloning into "folder_name"
go into that folder: cd folder_name
eclipse-workspace> select the project you created > copy paste all your files into cloned repo folder
git add .
git commit -m "sample maven java"
git push


//maven web project
File>New>Other>Maven Project>Next
org.apache.maven 
give artifact id
maven-archetype-webapp 1.4
you can change the data to be displayed in index.jsp

servlet-api maven dependency: add this code in your dependencies in pom.xml
<dependency>
 <groupId>javax.servlet</groupId>
 <artifactId>servlet-api</artifactId>
 <version>2.5</version>
</dependency>

right click on project> Run As>
-Maven clean install test
-build 
goals: clean install test
-run on server > tomcat 9.0 > restart server> ok

to push this project into github
create a new repository in github "sampleExampleWeb1"
add .gitignore maven
go to code and copy git repo URL
in eclipse, right click on your project, there is an option to show in local terminal> git bash

git init
git add .
git commit -m "sample maven web"
git remote add origin "<your repo URL>"
git push -u origin master



6 a
for java: build test
New Item> FreeStyle project> give name e.g buildjava
build:
-description
-scm: add git url
-specify branch main or master */main or */master
-build steps> add build steps> Invoke top-level Maven targets > Maven version : MAVEN_HOME> Goals: clean
 build steps> add build steps> Invoke top-level Maven targets > Maven version : MAVEN_HOME> Goals: install
-add post build actions> archive artifacts> **/*
 add post build actions> build other projects> "<other project name>" eg: testjava (trigger only if build is stable)

create test project 
New Item> FreeStyle project> give name e.g testjava
-scm> none
-build environment> delete workspace before build starts
-build steps> add build step> copy artifacts: buildjava> stable build only> **/*
-build steps> add build step> Invoke top level maven targets> Maven version: MVEN_HOME> Goals: test
-add post build actions> archive artifacts> **/*

create pipeline:
give name and build pipeline view
pipeline flow> select buildjava

6 b
for web: build test deploy
New Item> FreeStyle project> give name e.g buildweb
build:
-description
-scm: add git url
-specify branch main or master */main or */master
-build triggers: poll scm> * * * * * (at every minute)
-build steps> add build steps> Invoke top-level Maven targets > Maven version : MAVEN_HOME> Goals: clean
 build steps> add build steps> Invoke top-level Maven targets > Maven version : MAVEN_HOME> Goals: install
-add post build actions> archive artifacts> **/*
 add post build actions> build other projects> "<other project name>" eg: testweb (trigger only if build is stable)

create test project 
New Item> FreeStyle project> give name e.g testweb
-scm> none
-build environment> delete workspace before build starts
-build steps> add build step> copy artifacts: buildweb> stable build only> **/*
-build steps> add build step> Invoke top level maven targets> Maven version: MAVEN_HOME> Goals: test
-add post build actions> archive artifacts> **/*
 add post build actions> build other projects> "<other project name>" eg: deployweb (trigger only if build is stable)

create deploy project
New Item> FreeStyle project> give name e.g deployweb
-scm> none
-build environment> delete workspace before build starts
-build steps> add build step> copy artifacts: testweb> stable build only> **/*
-start your tomcat server
-add post build actions> deploy war/ear to container> **/*.war> give some context path "sampleMavenWeb"> Containers> Add container>
Tomcat 9.x> credentials> add> Jenkins
-Eclipse> servers> tomcat 9.0> tomcat-users.xml: you will have your username and password
credentials: admin
Gayathri2609$
-give tomcat URL

create pipeline:
give name and build pipeline view
pipeline flow> select buildweb

tomcat> manager app> context path> to view your file
go to github> src> index.jsp> make some modifications> tomcat> manager app> context path> to view your file


6 c
pipeline script
pipeline {
 agent any
 tools {
 maven 'MAVEN_HOME'
 }
 stages {
 stage('git repo & clean') {
 steps {
 //bat "rmdir /s /q SampleMavenJavaProject"
 bat "git clone https://github.com/Gaya3-m/SampleMavenJavaProject.git"
 bat "mvn clean -f SampleMavenJavaProject"
 }
 }
 stage('install') {
 steps {
 bat "mvn install -f SampleMavenJavaProject"
 }
 }
 stage('test') {
 steps {
 bat "mvn test -f SampleMavenJavaProject"
 }
 }
 stage('package') {
 steps {
 bat "mvn package -f SampleMavenJavaProject"
 }
 }
 }
}

create pipeline:
New Item> declarativepipeline> Pipeline
-description
-pipeline> copy paste the script> build now

configure> build triggers> build periodically> * * * * *


docker 7a
open docker desktop> sign in
open docker hub> sign in

powershell> run as admin

docker --version
docker pull <image name> 
docker images
docker run <image name>

docker ps -a
docker rm [container-id] 
docker rmi <image name>

docker pull redis
docker run --name <newname> -d redis
Eg: docker run --name my-redis -d redis 
docker ps

docker exec -it <newname> redis-cli 
docker exec -it my-redis redis-cli 

127.0.0.1:6379> SET name "Alice"
OK
127.0.0.1:6379> GET name
"Alice" 
exit 

docker stop <newname> or docker stop<container id>
docker rm <container name>
docker rmi redis

Create our own image:
-Create an empty folder DockerProjects> create another folder (Redis)> create a file (Dockerfile) 
Dockerfile:
FROM redis:latest
CMD ["redis-server"]

-in powershell navigate to the path of docker file
cd /c/DockerProjects/Redis

docker build -t <name> . 
eg: docker build -t redisnew .
docker images 

docker run --name myredisnew -d redisnew
docker ps

docker stop myredisnew 
docker login
docker ps -a
docker commit <container id> <username>/<newname>
 eg: docker commit 0e993d2009a1 budarajumadhurika/redis1
docker images

//push into docker hub
docker push <username>/<newname>
eg: docker push budarajumadhurika/redis1
docker rm 0e993d2009a1
docker rmi budarajumadhurika/redis1
docker pull budarajumadhurika/redis1
docker run --name myredis -d budarajumadhurika/redis1
docker exec -it myredis redis-cli
SET name "Abcdef"
GET name
exit
docker logout

7b modify and push docker image
docker pull ubuntu 
docker run -it --name newubuntu -d ubuntu //to run the container using interactive shell (name=newubuntu) 
docker ps 
docker exec -it 885a01bcdbe0 bash 
git --version 
apt update 
apt install git -y 
git --version 
exit

docker stop 885a01bcdbe0
docker commit 885a01bcdbe0 budarajumadhurika/newubuntu2024 
docker images 
docker login 
docker push budarajumadhurika/newubuntu2024
go to docker hub and check if the image is pushed or not

docker rm 885a01bcdbe0 
docker rmi budarajumadhurika/newubuntu2024 
docker logout 

docker pull budarajumadhurika/newubuntu2024 
docker run --name newubuntu2024 -it budarajumadhurika/newubuntu2024
git --version 
exit

docker ps  -a
docker rm 885a01bcdbe0 
docker rmi budarajumadhurika/newubuntu2024 

7c create and push docker image
open docker desktop> sign in
open docker hub> sign in


Create our own image:
-Create an empty folder DockerProjects> create another folder (Calc)> create a file (Dockerfile) and create calculator.js

calculator.js
// calculator.js
function add(a, b) {
    return a + b;
}
function subtract(a, b) {
    return a - b;
}
function multiply(a, b) {
    return a * b;
}
function divide(a, b) {
    if (b === 0) {
        return "Cannot divide by zero!";
    }
    return a / b;
}
  // Print the calculated values
console.log("Addition (2 + 3):", add(2, 3));
console.log("Subtraction (5 - 2):", subtract(5, 2));
console.log("Multiplication (4 * 3):", multiply(4, 3));
console.log("Division (10 / 2):", divide(10, 2));

Dockerfile:
FROM node:16-alpine
WORKDIR /app
COPY calculator.js /app
CMD ["node", "calculator.js"]

//build docker image
powershell> run as admin
cd pathToYourFolder
docker build -t simple-calculator . 
docker run simple-calculator 

docker login 
docker tag simple-calculator your-dockerhub-username/simplecalculator
docker push your-dockerhub-username/simple-calculator 

# List all containers (even stopped ones)
docker ps -a
# Remove the container by ID
docker rm <container-id>
# Remove the local image
docker rmi your-dockerhub-username/simple-calculator
docker pull your-dockerhub-username/simple-calculator
docker run your-dockerhub-username/simple-calculator 

#List all the containers
docker ps -a
#Delete the container by its ID
docker rm <container-id>
# List all images
docker images
# Remove unused images by ID
docker rmi <image-id>
# Log out of Docker Hub.
docker logout 

7d
create a folder and give it a name:
docker-compose.yaml:
version: '3'

services:
  # Database
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    networks:
      - wpsite
  # Wordpress
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - '8000:80'
    restart: always
    volumes: ['./:/var/www/html']
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
    networks:
      - wpsite
networks:
  wpsite:
volumes:
  db_data:

cd <path>
go to your folder where dockerfile is present 
docker-compose up -d 
Open your web browser.
Go to http://localhost:8000.
Follow the WordPress setup wizard to complete the installation:
Site Name.
Admin Username and Password.
Email Address. 
docker-compose stop
docker ps
Start Again
To restart the containers:
docker-compose start
Remove Containers
To stop and remove everything:
docker-compose down 

7e

minikube start 
kubectl create deployment mynginx --image=nginx 
kubectl get deployments 
kubectl expose deployment mynginx --type=NodePort --port=80 --target-port=80 
kubectl scale deployment mynginx --replicas=4 
kubectl get pods
kubectl port-forward svc/mynginx 8081:80 
open another powershell
minikube dashboard
kubectl delete deployment mynginx
kubectl delete service mynginx 
minikube stop 

7f
docker pull jasonrivers/nagios:latest 
docker run --name nagiosdemo -p 8888:80 jasonrivers/nagios:latest

go to browser> localhost:8888 
Login Credentials:
o Username: nagiosadmin
o Password: nagios

hosts> localhost> monitor host state information

open another powershell
docker ps
docker stop nagiosdemo
docker rm nagiosdemo 
docker images
docker rmi jasonrivers/nagios:latest

8b:
Type aws academy login
select the untitled one
select student login
Enter the credentials:
AWS:
username: gayathri2609z@gmail.com
password: Gayathri2609$

click on aws academy learner lab> modules> launch aws academy learner lab> start lab


1.Once the radio button turns green, click on aws it will lead to aws management console
2. On the AWS homepage, click Services, then choose EC2 under Compute.
Launch an EC2 Instance
Here, we will set up a virtual server to host our web application.
1. Click Launch Instance.
2. Configure the settings as follows:
o Name: Enter a name like "MyWebServer" to identify your server.
o Application and OS: Choose Ubuntu (Free Tier Eligible).
Architecture: 64 bit x86
o Instance Type: Select t2.micro (1 CPU, 1 GB RAM).
o Key Pair: Create a new key pair, download the .pem file, and save it securely.
    -to create a key pair> give name> create key pair> save it into an empty folder
o Network: Enable Allow SSH/HTTP/HTTPS traffic to make your website
accessible.
o Storage: Use the default 8 GB.

3. Click Launch Instance and wait until the status changes to "Running."
click on checkbox> connect

Step 3: Connect to the EC2 Instance

1. Select your instance, click Connect, and copy the SSH command.
2. Open PowerShell (Windows) or Terminal (Mac/Linux) on your computer.
3. Navigate to the folder where your .pem file is saved using the cd command.
4. Paste the SSH command and press Enter. Type "yes" if prompted.
Step 4: Prepare the Instance
Now, we will prepare the server by installing required tools.
1. Update the system to ensure all software is up to date:
sudo apt update
2. Install Docker to package and run our web application:
sudo apt-get install docker.io
3. Install Git to manage and download code:
sudo apt install git
4. Install Nano for editing files directly on the server:
sudo apt install nano

Step 5: Create Your Web Application
In this step, we will build a simple web page and upload it to GitHub.
1. On your computer, create a folder>file named index.html and add the following content:
<html>
<head><title>My Webpage</title></head>
<body><h1>Hello from AWS!</h1></body>
</html>
2. Initialize Git in the file's folder:
right click> open git bash here
git init
git add .
git commit -m "First commit"
3. Create a GitHub repository, copy its HTTPS URL, and upload your file:
git branch -M main
git remote add origin <Your_Repo_URL>
git push -u origin main
copy the https path of the git repo and go back to cmd

Step 6: Deploy the Web Application Using Docker
Here, we will deploy the web application to the EC2 instance.
1. On the EC2 instance, clone your GitHub repository:
git clone <Your_Repo_URL>
ls
cd folder
ls
you should find index.html

2. Create a Dockerfile in the project folder using Nano:
nano Dockerfile
Add the following content:
FROM nginx:alpine
COPY . /usr/share/nginx/html

Save the file by pressing Ctrl + O, then Enter, and exit Nano with Ctrl + X.
3. Build and run the Docker container to serve the web application:
sudo docker build -t my-web-app .
sudo docker run -d -p 80:80 my-web-app

Step 7: Access Your Web Application
go back to your instances 
In this step, we will view the deployed web page online.
1. Copy the Public IPV4 Address of your EC2 instance from the AWS console.
2. Paste it into your browser (e.g., http://<Public_IP>).
3. You’ll see your web page with the message "Hello from AWS!" displayed.
Step 8: Clean Up
Finally, we will clean up resources to avoid any charges.
1. Stop the running Docker container:
sudo docker ps
sudo docker stop <Container_ID>
2. Terminate the EC2 instance in the AWS console by selecting it, clicking Instance
State, and choosing Terminate Instance. 


8c:

Step 1: Launch an EC2 Instance
In this step, we will set up a virtual server to host our Maven web project.
1. Log in to AWS: Access your AWS account and navigate to Services > Compute >
EC2.
2. Launch the instance:
o Name: Enter a descriptive name, e.g., MavenWebProjectServer.
o AMI: Select Ubuntu Server (Free Tier Eligible).
o Instance Type: Choose t2.micro.
o Key Pair: Create a key pair or use an existing one. Save the .pem file securely.
o Network Settings: Enable Allow HTTP/HTTPS traffic.
o Storage: Use the default size (8 GB).
3. Click Launch Instance and wait for the status to change to "Running."
4. Note down the Public IPV4 Address from the EC2 dashboard.
Step 2: Connect to the EC2 Instance
In this step, we will connect to the server.
1. Open PowerShell (Windows) or Terminal (Mac/Linux) and navigate to the folder with
the .pem file using the cd command.
2. Use SSH to connect to the instance:
ssh -i "<KeyFile>.pem" ubuntu@<Public_IP>
Replace <KeyFile> with the .pem file name and <Public_IP> with your
instance’s public IP.
3. If prompted, type "yes" to confirm the connection.
Step 3: Prepare the EC2 Server
Now, we will install the necessary tools.
1. Update the system:
sudo apt update
2. Install Docker:
sudo apt-get install docker.io -y
3. Install Git:
sudo apt install git -y
4. Install Nano (text editor):
sudo apt install nano -y
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
3
Step 4: Clone Your Maven Web Project
In this step, we will download the Maven project from GitHub.
1. Go to your GitHub repository, click Code > HTTPS, and copy the URL.
2. Clone the repository:
git clone <Your_Repo_URL>
ls
cd yourfolder
ls you will have src, pom.xml, target
Replace <Your_Repo_URL> with the copied URL.
Step 5: Create a Dockerfile
We will create a Dockerfile to containerize the Maven project.
1. Navigate to the project folder:
cd <Your_Project_Folder>
Replace <Your_Project_Folder> with the folder name.
2. Open Nano to create the Dockerfile:
nano Dockerfile
3. Add the following content based on the JDK version used during development:
o For JDK 21:
FROM tomcat:9-jdk21
COPY target/*.war /usr/local/tomcat/webapps/

Step 6: Build and Run the Docker Container
1. Build the Docker image:
sudo docker build -t maven-web-project .
2. Run the container:
sudo docker run -d -p 9090:8080 maven-web-project
o -d: Runs the container in the background.
o -p 9090:8080: Maps port 9090 on your instance to port 8080 in the
container.
Step 7: Configure Security Group for Port 9090
We will ensure the EC2 instance allows traffic on port 9090.
1. In the AWS EC2 dashboard, go to Security Options and click the Security Group ID>security groups.
2. edit inbound rules:
Add an inbound rule:
o Type: Custom TCP
o Port Range: 9090
o Source: Anywhere (0.0.0.0/0) or your IP.
3. Save the changes.
Step 8: Access the Web Application
We will now test the deployment.
1. Open a browser and navigate to:

http://<Public_IP>:9090/<Your_Project_Name> <Your_Project_Name> is nothing but your folder in which web project is present
Replace <Public_IP> with the instance’s public IP and <Your_Project_Name>
with your Maven project name.
Step 9: Clean Up
Finally, we will stop the container and terminate the instance.
1. Stop the Docker container:
sudo docker ps
sudo docker stop <Container_ID>
Replace <Container_ID> with the container ID.
2. Terminate the EC2 instance In the EC2 dashboard, go to Instance State and select
Terminate Instance. 

