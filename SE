5 
org.apache.maven quickstart 1.4
clean install test
build 

maven-archetype-webapp
servlet-api maven dependency
<dependency>
 <groupId>javax.servlet</groupId>
 <artifactId>servlet-api</artifactId>
 <version>2.5</version>
</dependency>

clean install package

6 a
for build add git url
specify branch
Invoke top-level Maven targets
clean install
post build archive artifacts **/*
build other projects: test
create test project 
copy artifacts: build **/*
Invoke top-level Maven targets test
post build archive test artifacts **/*
create pipeline and run

6 b
same as above use config poll scm
deploy war/ear to container **/*.war
Tomcat 9 
credentials: admin
Gayathri2609$
post build archive **/*

6 c
pipeline script
pipeline {
 agent any
 tools {
 maven 'MAVEN_HOME'
 }
 stages {
 stage('git repo & clean') {
 steps {
 //bat "rmdir /s /q SampleMavenJavaProject"
 bat "git clone https://github.com/Gaya3-m/SampleMavenJavaProject.git"
 bat "mvn clean -f SampleMavenJavaProject"
 }
 }
 stage('install') {
 steps {
 bat "mvn install -f SampleMavenJavaProject"
 }
 }
 stage('test') {
 steps {
 bat "mvn test -f SampleMavenJavaProject"
 }
 }
 stage('package') {
 steps {
 bat "mvn package -f SampleMavenJavaProject"
 }
 }
 }
}

docker 7a
docker --version
docker pull hello-world 
docker run hello-world
docker ps -a
docker rm [container-id] 
docker rmi hello-world 
docker pull redis
docker run --name my-redis -d redis 
docker ps
docker exec -it my-redis redis-cli 
127.0.0.1:6379> SET name "Alice"
OK
127.0.0.1:6379> GET name
"Alice" 
docker stop my-redis 
docker start my-redis 
docker rm my-redis 
docker rmi redis

cd /c/DockerProjects/Redis 
Dockerfile:
FROM redis:latest
CMD ["redis-server"]

docker build -t redisnew .
docker run --name myredisnew -d redisnew
docker ps
docker stop myredisnew
docker login
docker ps -a
 docker commit 0e993d2009a1 budarajumadhurika/redis1
docker images
docker push budarajumadhurika/redis1
docker rm 0e993d2009a1
docker rmi budarajumadhurika/redis1
docker rm 0e993d2009a1
docker rmi budarajumadhurika/redis1
docker ps -a
docker logout
docker pull budarajumadhurika/redis1
 docker run --name myredis -d budarajumadhurika/redis1
docker exec -it myredis redis-cli
SET name "Abcdef"
GET name
exit
docker ps -a
 docker stop myredis
 docker rm 50a6e4a9c326
 docker images
. docker rmi budarajumadhurika/redis1
docker logout

7b
docker pull ubuntu 
docker run -it --name newubuntu -d ubuntu 
docker ps 
docker exec -it 885a01bcdbe0 bash 
git --version 
apt update 
apt install git -y 
git --version 
exit
docker stop 885a01bcdbe0
docker commit 885a01bcdbe0 budarajumadhurika/newubuntu2024 
docker images 
docker login 
docker push budarajumadhurika/newubuntu2024
docker logout 
docker rm 885a01bcdbe0 
docker rmi budarajumadhurika/newubuntu2024 
docker pull budarajumadhurika/newubuntu2024 
docker run --name newubuntu2024 -it budarajumadhurika/newubuntu2024
git --version 
exit
docker ps  -a
docker rm 885a01bcdbe0 
docker rmi budarajumadhurika/newubuntu2024 

7c
calculator.js
// calculator.js
function add(a, b) {
    return a + b;
}
function subtract(a, b) {
    return a - b;
}
function multiply(a, b) {
    return a * b;
}
function divide(a, b) {
    if (b === 0) {
        return "Cannot divide by zero!";
    }
    return a / b;
}
  // Print the calculated values
console.log("Addition (2 + 3):", add(2, 3));
console.log("Subtraction (5 - 2):", subtract(5, 2));
console.log("Multiplication (4 * 3):", multiply(4, 3));
console.log("Division (10 / 2):", divide(10, 2));

Dockerfile:
FROM node:16-alpine
WORKDIR /app
COPY calc.js /app
CMD ["node", "calc.js"]


docker build -t simple-calculator . 
docker run simple-calculator 
docker login 
docker tag simple-calculator your-dockerhub-username/simplecalculator
docker push your-dockerhub-username/simple-calculator 
# List all containers (even stopped ones)
docker ps -a
# Remove the container by ID
docker rm <container-id>
# Remove the local image
docker rmi your-dockerhub-username/simple-calculator
docker pull your-dockerhub-username/simple-calculator
docker run your-dockerhub-username/simple-calculator 
#List all the containers
docker ps -a
#Delete the container by its ID
docker rm <container-id>
# List all images
docker images
# Remove unused images by ID
docker rmi <image-id>
# Log out of Docker Hub.
docker logout 

7d
docker-compose.yaml:
version: '3'

services:
  # Database
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    networks:
      - wpsite
  # Wordpress
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - '8000:80'
    restart: always
    volumes: ['./:/var/www/html']
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
    networks:
      - wpsite
networks:
  wpsite:
volumes:
  db_data:

docker-compose up -d 
Open your web browser.
Go to http://localhost:8000.
Follow the WordPress setup wizard to complete the installation:
Site Name.
Admin Username and Password.
Email Address. 
docker-compose stop
Start Again
To restart the containers:
docker-compose start
Remove Containers
To stop and remove everything:
docker-compose down 

7e
minikube start 
kubectl create deployment mynginx --image=nginx 
kubectl get deployments 
kubectl expose deployment mynginx --type=NodePort --port=80 --
target-port=80 
kubectl scale deployment mynginx --replicas=4 
kubectl port-forward svc/mynginx 8081:80 
minikube dashboard
kubectl delete deployment mynginx
kubectl delete service mynginx 
minikube stop 

7f
docker pull jasonrivers/nagios:latest 
docker run --name nagiosdemo -p 8888:80 jasonrivers/nagios:latest
localhost:8888 
Login Credentials:
o Username: nagiosadmin
o Password: nagios
docker stop nagiosdemo
docker rm nagiosdemo 
docker rmi jasonrivers/nagios:latest

8b:
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
1
 SOFTWARE ENGINEERING LAB
EXERCISE – 8
TOPIC – 2
PROJECT DEPLOYMENT IN THE AWS CLOUD USING EC2
INSTANCE
In this exercise, we will be:
 Launch a virtual server (EC2 instance) on AWS.
 Install essential tools like Docker, Git, and Nano.
 Create and deploy a simple web application using Docker.
 Access the application online.
 Clean up resources to avoid unnecessary charges.
Note: At every step take screenshots and save in a document
Step 1: Log in to AWS and Go to EC2
In this step, we will log in to our AWS account and access the EC2 service.
1. Log in to your AWS account.
2. On the AWS homepage, click Services, then choose EC2 under Compute.
Step 2: Launch an EC2 Instance
Here, we will set up a virtual server to host our web application.
1. Click Launch Instance.
2. Configure the settings as follows:
o Name: Enter a name like "MyWebServer" to identify your server.
o Application and OS: Choose Ubuntu (Free Tier Eligible).
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
2
o Instance Type: Select t2.micro (1 CPU, 1 GB RAM).
o Key Pair: Create a new key pair, download the .pem file, and save it securely.
o Network: Enable Allow HTTP/HTTPS traffic to make your website
accessible.
o Storage: Use the default 8 GB.
3. Click Launch Instance and wait until the status changes to "Running."
Step 3: Connect to the EC2 Instance
In this step, we will connect to our virtual server.
1. Select your instance, click Connect, and copy the SSH command.
2. Open PowerShell (Windows) or Terminal (Mac/Linux) on your computer.
3. Navigate to the folder where your .pem file is saved using the cd command.
4. Paste the SSH command and press Enter. Type "yes" if prompted.
Step 4: Prepare the Instance
Now, we will prepare the server by installing required tools.
1. Update the system to ensure all software is up to date:
sudo apt update
2. Install Docker to package and run our web application:
sudo apt-get install docker.io
3. Install Git to manage and download code:
sudo apt install git
4. Install Nano for editing files directly on the server:
sudo apt install nano
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
3
Step 5: Create Your Web Application
In this step, we will build a simple web page and upload it to GitHub.
1. On your computer, create a file named index.html and add the following content:
<html>
<head><title>My Webpage</title></head>
<body><h1>Hello from AWS!</h1></body>
</html>
2. Initialize Git in the file's folder:
git init
git add .
git commit -m "First commit"
3. Create a GitHub repository, copy its HTTPS URL, and upload your file:
git remote add origin <Your_Repo_URL>
git push -u origin main
Step 6: Deploy the Web Application Using Docker
Here, we will deploy the web application to the EC2 instance.
1. On the EC2 instance, clone your GitHub repository:
git clone <Your_Repo_URL>
2. Create a Dockerfile in the project folder using Nano:
nano Dockerfile
Add the following content:
FROM nginx:alpine
COPY . /usr/share/nginx/html
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
4
Save the file by pressing Ctrl + O, then Enter, and exit Nano with Ctrl + X.
3. Build and run the Docker container to serve the web application:
sudo docker build -t my-web-app .
sudo docker run -d -p 80:80 my-web-app
Step 7: Access Your Web Application
In this step, we will view the deployed web page online.
1. Copy the Public IP Address of your EC2 instance from the AWS console.
2. Paste it into your browser (e.g., http://<Public_IP>).
3. You’ll see your web page with the message "Hello from AWS!" displayed.
Step 8: Clean Up
Finally, we will clean up resources to avoid any charges.
1. Stop the running Docker container:
sudo docker ps
sudo docker stop <Container_ID>
2. Terminate the EC2 instance in the AWS console by selecting it, clicking Instance
State, and choosing Terminate Instance. 


8c:
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
1
 SOFTWARE ENGINEERING LAB
EXERCISE – 8
TOPIC – 3
MAVEN WEB PROJECT DEPLOYMENT IN THE AWS
CLOUD USING EC2 INSTANCE
In this exercise, we will be:
 Launch an EC2 instance on AWS.
 Install Docker, Git, and Nano.
 Deploy a Maven web project using Docker and expose it on port 9090.
 Access the application online.
 Clean up resources to avoid unnecessary charges.
Note:
1. At every step take screenshots and save in a document.
2. This guide uses JDK 11, which was used for developing the project. If your
project was developed with JDK 21, adjust the Dockerfile as instructed in
Step 5.
Step 1: Launch an EC2 Instance
In this step, we will set up a virtual server to host our Maven web project.
1. Log in to AWS: Access your AWS account and navigate to Services > Compute >
EC2.
2. Launch the instance:
o Name: Enter a descriptive name, e.g., MavenWebProjectServer.
o AMI: Select Ubuntu Server (Free Tier Eligible).
o Instance Type: Choose t2.micro.
o Key Pair: Create a key pair or use an existing one. Save the .pem file securely.
o Network Settings: Enable Allow HTTP/HTTPS traffic.
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
2
o Storage: Use the default size (8 GB).
3. Click Launch Instance and wait for the status to change to "Running."
4. Note down the Public IP Address from the EC2 dashboard.
Step 2: Connect to the EC2 Instance
In this step, we will connect to the server.
1. Open PowerShell (Windows) or Terminal (Mac/Linux) and navigate to the folder with
the .pem file using the cd command.
2. Use SSH to connect to the instance:
ssh -i "<KeyFile>.pem" ubuntu@<Public_IP>
Replace <KeyFile> with the .pem file name and <Public_IP> with your
instance’s public IP.
3. If prompted, type "yes" to confirm the connection.
Step 3: Prepare the EC2 Server
Now, we will install the necessary tools.
1. Update the system:
sudo apt update
2. Install Docker:
sudo apt-get install docker.io -y
3. Install Git:
sudo apt install git -y
4. Install Nano (text editor):
sudo apt install nano -y
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
3
Step 4: Clone Your Maven Web Project
In this step, we will download the Maven project from GitHub.
1. Go to your GitHub repository, click Code > HTTPS, and copy the URL.
2. Clone the repository:
git clone <Your_Repo_URL>
Replace <Your_Repo_URL> with the copied URL.
Step 5: Create a Dockerfile
We will create a Dockerfile to containerize the Maven project.
1. Navigate to the project folder:
cd <Your_Project_Folder>
Replace <Your_Project_Folder> with the folder name.
2. Open Nano to create the Dockerfile:
nano Dockerfile
3. Add the following content based on the JDK version used during development:
o For JDK 11 (used in this guide):
FROM tomcat:9-jdk11
COPY target/*.war /usr/local/tomcat/webapps/
o For JDK 21:
FROM tomcat:9-jdk21
COPY target/*.war /usr/local/tomcat/webapps/
4. Save and exit Nano: Press Ctrl + O, then Enter, and Ctrl + X.
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
4
Explanation:
 FROM tomcat:9-jdk11 or FROM tomcat:9-jdk21 specifies the Tomcat base
image with the appropriate JDK version.
 COPY target/*.war /usr/local/tomcat/webapps/ copies the .war file
into the webapps directory of Tomcat for deployment.
Step 6: Build and Run the Docker Container
1. Build the Docker image:
sudo docker build -t maven-web-project .
2. Run the container:
sudo docker run -d -p 9090:8080 maven-web-project
o -d: Runs the container in the background.
o -p 9090:8080: Maps port 9090 on your instance to port 8080 in the
container.
Step 7: Configure Security Group for Port 9090
We will ensure the EC2 instance allows traffic on port 9090.
1. In the AWS EC2 dashboard, go to Security and click the Security Group ID.
2. Add an inbound rule:
o Type: Custom TCP
o Port Range: 9090
o Source: Anywhere (0.0.0.0/0) or your IP.
3. Save the changes.
Step 8: Access the Web Application
We will now test the deployment.
1. Open a browser and navigate to:
RKR21 SOFTWARE ENGINEERING LAB CSE/IT/CSM/CSD III/I
5
http://<Public_IP>:9090/<Your_Project_Name>
Replace <Public_IP> with the instance’s public IP and <Your_Project_Name>
with your Maven project name.
Step 9: Clean Up
Finally, we will stop the container and terminate the instance.
1. Stop the Docker container:
sudo docker ps
sudo docker stop <Container_ID>
Replace <Container_ID> with the container ID.
2. Terminate the EC2 instance In the EC2 dashboard, go to Instance State and select
Terminate Instance. 

